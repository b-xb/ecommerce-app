openapi: 3.0.1
info:
  title: E-Commerce App API
  version: 1.0.0
  description: A fully-functioning e-commerce application REST API
paths:
  /products:
    get:
      operationId: getProducts
      summary: Get all Products
      responses:
        '200':
          $ref: '#/components/responses/productsSuccess'
      tags:
        - Products
    post:
      operationId: addProduct
      summary: Add a new Product
      requestBody:
        $ref: '#/components/requestBodies/NewProduct'
      responses:
        '201':
          $ref: '#/components/responses/productSuccess'
      tags:
        - Products
  /products/{productId}:
    get:
      operationId: getProductById
      summary: Get a Product by Product ID
      parameters:
      - $ref: '#/components/parameters/productId'
      responses:
        '200':
          $ref: '#/components/responses/productSuccess'
      tags:
        - Products
    put:
      operationId: updateProductById
      summary: Update a Product by Product ID
      parameters:
      - $ref: '#/components/parameters/productId'
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '200':
          $ref: '#/components/responses/productSuccess'
      tags:
        - Products
    delete:
      operationId: deleteProductById
      summary: Delete a Product by Product ID
      parameters:
      - $ref: '#/components/parameters/productId'
      responses:
        '204':
          $ref: '#/components/responses/deleteSuccess'
      tags:
        - Products
  /users:
    get:
      operationId: getUsers
      summary: Get all Users
      responses:
        '200':
          $ref: '#/components/responses/usersSuccess'
      tags:
        - Users
    post:
      operationId: addUser
      summary: Add a new User
      requestBody:
        $ref: '#/components/requestBodies/NewUser'
      responses:
        '201':
          $ref: '#/components/responses/userSuccess'
      tags:
        - Users
  /users/{userId}:
    get:
      operationId: getUserById
      summary: Get a User by User ID
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/userSuccess'
      tags:
        - Users
    put:
      operationId: updateUserById
      summary: Update a User by User ID
      parameters:
      - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          $ref: '#/components/responses/userSuccess'
      tags:
        - Users
    delete:
      operationId: deleteUserById
      summary: Delete a User by User ID
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        '204':
          $ref: '#/components/responses/deleteSuccess'
      tags:
        - Users
  /users/{userId}/cart-items:
    get:
      operationId: getCartItemsByUser
      summary: Get all Cart Items by User ID
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/cartItemsSuccess'
      tags:
        - User - Shopping Cart
    post:
      operationId: addCartItemByUser
      summary: Add a new Cart Item by User ID
      parameters:
      - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/CartItem'
      responses:
        '201':
          $ref: '#/components/responses/cartItemSuccess'
      tags:
        - User - Shopping Cart
    delete:
      operationId: deleteAllCartItemsByUser
      summary: Delete all Cart Items by User ID
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        '204':
          $ref: '#/components/responses/deleteSuccess'
      tags:
        - User - Shopping Cart
  /users/{userId}/cart-items/{productId}:
    get:
      operationId: getCartItemByUserAndProduct
      summary: Get a Cart Item by User ID and Product ID
      parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/productId'
      responses:
        '200':
          $ref: '#/components/responses/cartItemSuccess'
      tags:
        - User - Shopping Cart
    put:
      operationId: updateCartItemByUserAndProduct
      summary: Update a Cart Item by User ID and Product ID
      parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/productId'
      requestBody:
        $ref: '#/components/requestBodies/CartItem'
      responses:
        '200':
          $ref: '#/components/responses/cartItemSuccess'
      tags:
        - User - Shopping Cart
    delete:
      operationId: deleteCartItemByUserAndProduct
      summary: Delete a Cart Item by User ID and Product ID
      parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/productId'
      responses:
        '204':
          $ref: '#/components/responses/deleteSuccess'
      tags:
        - User - Shopping Cart
  /users/{userId}/orders:
    get:
      operationId: getOrdersByUser
      summary: Get all Orders by User ID
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ordersSuccess'
      tags:
        - User - Orders
    post:
      operationId: addOrderByUser
      summary: Add a new Order by User ID
      parameters:
      - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/NewOrderAndItems'
      responses:
        '201':
          $ref: '#/components/responses/orderSuccess'
      tags:
        - User - Orders
    delete:
      operationId: deleteAllOrdersByUser
      summary: Delete all Orders by User ID
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        '204':
          $ref: '#/components/responses/deleteSuccess'
      tags:
        - User - Orders
  /orders:
    get:
      operationId: getOrders
      summary: Get all Orders
      responses:
        '200':
          $ref: '#/components/responses/ordersSuccess'
      tags:
        - Orders
  /orders/{orderId}:
    get:
      operationId: getOrderById
      summary: Get an Order by ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          $ref: '#/components/responses/orderSuccess'
      tags:
        - Orders
    delete:
      operationId: deleteOrderById
      summary: Delete an Order by ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      responses:
        '204':
          $ref: '#/components/responses/deleteSuccess'
      tags:
        - Orders
  /orders/{orderId}/status:
    get:
      operationId: getOrderStatusById
      summary: Get an Order Status by ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          $ref: '#/components/responses/orderStatusSuccess'
      tags:
        - Orders
    put:
      operationId: updateOrderStatusById
      summary: Update an Order Status by ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      requestBody:
        $ref: '#/components/requestBodies/OrderStatus'
      responses:
        '200':
          $ref: '#/components/responses/orderStatusSuccess'
      tags:
        - Orders
  /orders/{orderId}/items:
    get:
      operationId: getOrderItemsByOrder
      summary: Get all Order Items by Order ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          $ref: '#/components/responses/orderItemsSuccess'
      tags:
        - Orders
    post:
      operationId: addOrderItemsByOrder
      summary: Add new Order Items by Order ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      requestBody:
        $ref: '#/components/requestBodies/NewOrderItems'
      responses:
        '201':
          $ref: '#/components/responses/orderItemsSuccess'
      tags:
        - Orders
    delete:
      operationId: deleteAllOrderItemsByOrder
      summary: Delete all Order Items by Order ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      responses:
        '204':
          $ref: '#/components/responses/deleteSuccess'
      tags:
        - Orders
  /orders/{orderId}/items/{productId}:
    get:
      operationId: getOrderItemByOrderAndProduct
      summary: Get a Cart Item by User ID and Product ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/productId'
      responses:
        '200':
          $ref: '#/components/responses/orderItemSuccess'
      tags:
        - Orders
    put:
      operationId: updateOrderItemByOrderAndProduct
      summary: Update an Order Item by Order ID and Product ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/productId'
      requestBody:
        $ref: '#/components/requestBodies/OrderItem'
      responses:
        '200':
          $ref: '#/components/responses/orderItemSuccess'
      tags:
        - Orders
    delete:
      operationId: deleteOrderItemByOrderAndProduct
      summary: Delete an Order Item by Order ID and Product ID
      parameters:
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/productId'
      responses:
        '204':
          $ref: '#/components/responses/deleteSuccess'
      tags:
        - Orders
  /auth/register:
    post:
      operationId: authRegisterUser
      summary: Register a new User
      requestBody:
        $ref: '#/components/requestBodies/NewUser'
      responses:
        '201':
          $ref: '#/components/responses/userSuccess'
      tags:
        - Authentication
  /auth/login:
    post:
      operationId: authLogin
      summary: Authenticate a User and start a User session
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'
      responses:
        '200':
          $ref: '#/components/responses/userSuccess'
      tags:
        - Authentication
  /auth/verify:
    get:
      operationId: authVerify
      summary: End User session
      responses:
        '200':
          $ref: '#/components/responses/sessionValid'
        '401':
          $ref: '#/components/responses/sessionInvalid'
      tags:
        - Authentication
  /auth/logout:
    post:
      operationId: authLogout
      summary: End User session
      responses:
        '204':
          $ref: '#/components/responses/logoutSuccess'
      tags:
        - Authentication
components:
  schemas:
    OrderStatus:
      type: string
      enum:
        - created
        - accepted
        - paid
        - posted
        - recieved
    NewProduct:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        unit_price:
          type: number
          multipleOf: 0.01
          minimum: 0
        stock:
          type: integer
          format: int32
          minimum: 0
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        unit_price:
          type: number
          multipleOf: 0.01
          minimum: 0
        stock:
          type: integer
          format: int32
          minimum: 0
    Products:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    NewUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        password:
          type: string
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    CartItem:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int32
          minimum: 0
    CartItems:
      type: array
      items:
        $ref: '#/components/schemas/CartItem'
    NewOrder:
      type: object
      properties:
        created:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/OrderStatus'
    NewOrderItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int32
          minimum: 0
    NewOrderItems:
      type: array
      items:
        $ref: '#/components/schemas/NewOrderItem'
    NewOrderAndItems:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/NewOrder'
        orderItems:
          $ref: '#/components/schemas/NewOrderItems'
    OrderItem:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int32
          minimum: 0
        unit_price:
          type: number
          multipleOf: 0.01
          minimum: 0
        total_cost:
          type: number
          multipleOf: 0.01
          minimum: 0
    OrderItems:
      type: array
      items:
        $ref: '#/components/schemas/OrderItem'
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/OrderStatus'
    Orders:
      type: array
      items:
        $ref: '#/components/schemas/Order'
    SessionValid:
      type: object
      properties:
        message:
          type: string
          example: Stored session is valid
        status:
          type: boolean
          example: true
    SessionInvalid:
      type: object
      properties:
        message:
          type: string
          example: Stored session is invalid
        status:
          type: boolean
          example: false
  parameters:
    userId:
      name: userId
      in: path
      description: unique id for a User
      required: true
      schema:
        type: string
        format: uuid
    productId:
      name: productId
      in: path
      description: unique id for a Product
      required: true
      schema:
        type: string
        format: uuid
    orderId:
      name: orderId
      in: path
      description: unique id for an Order
      required: true
      schema:
        type: string
        format: uuid
  responses:
    userSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: Success
    usersSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Users'
      description: Success
    cartItemSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CartItem'
      description: Success
    cartItemsSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CartItems'
      description: Success
    productSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
      description: Success
    productsSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Products'
      description: Success
    orderSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
      description: Success
    ordersSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Orders'
      description: Success
    orderItemSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderItem'
      description: Success
    orderItemsSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderItems'
      description: Success
    orderStatusSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderStatus'
      description: Success
    deleteSuccess:
      content:
        application/json:
          schema:
            type: string
          example: Delete operation was successful
      description: Delete operation was successful
    logoutSuccess:
      content:
        application/json:
          schema:
            type: string
          example: Logout operation was successful
      description: Logout operation was successful
    sessionValid:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionValid'
      description: Session is valid
    sessionInvalid:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionInvalid'
      description: Session is invalid
    genericStringResponse:
      content:
        application/json:
          schema:
            type: string
      description: A string response
    emptyResponse:
      description: An empty response body
  requestBodies:
    NewProduct:
      description: Information needed for creating a new Product object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewProduct'
    Product:
      description: A Product object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
      required: true
    NewUser:
      description: Information needed for creating a new User object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewUser'
      required: true
    UserLogin:
      description: Information needed to authenticate a User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
      required: true
    User:
      description: A User object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      required: true
    CartItem:
      description: A Cart Item object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CartItem'
      required: true
    NewOrderAndItems:
      description: Information needed for creating a new Order object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewOrderAndItems'
    NewOrderItems:
      description: Information needed for creating a new Order object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewOrderItems'
    Order:
      description: An Order object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
      required: true
    OrderItem:
      description: An Order Item object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderItem'
      required: true
    OrderItems:
      description: An Order Items object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderItems'
      required: true
    OrderStatus:
      description: An Order Status
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderStatus'
      required: true
tags:
- name: Products
  description: add, view, update and delete Products
- name: Orders
  description: add, view, update and delete Orders
- name: Users
  description: add, view, update and delete Users
- name: User - Shopping Cart
  description: add, view, update and delete Cart Items for a specific user
- name: User - Orders
  description: add, view and delete Orders made by a specific user
- name: Authentication
  description: actions related to user authentication
servers:
  - url: '{server}/api/v1'
    variables:
      server:
        default: http://127.0.0.1:4001